# Upstream to abstract backend connection(s) for php
upstream php {
  server unix:/tmp/php-cgi.socket;
  server 127.0.0.1:9000;
}

server {
  server_name {{ site_domain }};

  root /var/www/wordpress;
    client_max_body_size 30m;
    index index.php;

  location = /favicon.ico {
    log_not_found off;
    access_log off;
  }

  location = /robots.txt {
    allow all;
    log_not_found off;
    access_log off;
  }

  location / {
    try_files $uri $uri/ /index.php?$args;
  }

  location ~ \.php$ {
    fastcgi_split_path_info ^(.+\.php)(/.+)$;
    include fastcgi_params;
    try_files $uri =404;
    fastcgi_param PHP_VALUE "upload_max_filesize = 36M";
    fastcgi_param PHP_VALUE "post_max_size=37M";
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;
    fastcgi_pass 127.0.0.1:9000;
    fastcgi_connect_timeout 60;
    fastcgi_index index.php;
{% if config_ssl %}
    fastcgi_param HTTPS 'on';
{% endif %}

  }

  location ~* ^.+\.(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|rss|atom|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
    access_log off; 
    log_not_found off; 
    expires max;
  }
  
  location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
    expires max;
    log_not_found off;
  }

  location ^~ /.well-known/acme-challenge/ {
    allow all;
    root /var/lib/letsencrypt/;
    default_type "text/plain";
    try_files $uri =404;
  }

  # Config to enable HSTS (HTTP Strict Transport Security) [1] to avoid ssl
  # stripping [2].
  # [1] https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
  # [2] https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
   add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

  # Config to not allow the browser to render the page inside an frame or
  # iframe and avoid clickjacking [1].    If you need to allow [i]frames, you
  # can use SAMEORIGIN or even set an uri with ALLOW-FROM uri [2].
  # [1] http://en.wikipedia.org/wiki/Clickjacking
  # [2] https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
  add_header X-Frame-Options SAMEORIGIN;

  # When serving user-supplied content, include a X-Content-Type-Options:
  # nosniff header along with the Content-Type: header, to disable
  # content-type sniffing on some browsers.
  # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
  add_header X-Content-Type-Options nosniff;

  # This header enables the cross-site scripting (XSS) filter built into most
  # recent web browsers.    It's usually enabled by default anyway, so the role
  # of this header is to re-enable the filter for this particular website if
  # it was disabled by the user.
  # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
  add_header X-XSS-Protection "1; mode=block";

  # With Content Security Policy (CSP) enabled and a browser that supports it
  # [1] you can tell the browser that it can only download content from the
  # domains you explicitly allow [2, 3]
  # [1] http://caniuse.com/#feat=contentsecuritypolicy
  # [2] http://www.html5rocks.com/en/tutorials/security/content-security-policy/
  # [3] https://www.owasp.org/index.php/Content_Security_Policy
  # add_header Content-Security-Policy "default-src 'none'; connect-src 'self'; font-src 'self' data:; img-src 'self' data: https:; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; frame-ancestors 'none';";

  # Only send the shortened referrer to a foreign origin, full referrer
  # to a local host
  # https://infosec.mozilla.org/guidelines/web_security#referrer-policy
  add_header Referrer-Policy strict-origin-when-cross-origin;
}